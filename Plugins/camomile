#!/bin/bash

CamomileInstrument="Camomile"
CamomileEffect="CamomileFx"

AppleVstExtension=vst
AppleVst3Extension=vst3
AppleAuExtension=component
LinuxAppleVstExtension=so

ThisPath="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

unameOut="$(uname -s)"
case "${unameOut}" in
    Linux*)     machine=Linux;;
    Darwin*)    machine=Mac;;
    CYGWIN*)    machine=Cygwin;;
    MINGW*)     machine=MinGw;;
    *)          machine="UNKNOWN:${unameOut}"
esac

################################################################################
#                       Generate all the plugins from ./Builds                    #
################################################################################

generate_plugin_vst() {
    if [ -d $ThisPath/../$1.$AppleVstExtension ]; then
        if [ -d $ThisPath/Builds/$3.$AppleVstExtension ]; then
            rm -rf $ThisPath/Builds/$3.$AppleVstExtension
        fi

        cp -rf $ThisPath/../$1.$AppleVstExtension/ $ThisPath/Builds/$3.$AppleVstExtension
        cp -rf $2/$3/ $ThisPath/Builds/$3.$AppleVstExtension/Contents/Resources
        plutil -replace CFBundleName -string $3 $ThisPath/Builds/$3.$AppleVstExtension/Contents/Info.plist
        plutil -replace CFBundleDisplayName -string $3 $ThisPath/Builds/$3.$AppleVstExtension/Contents/Info.plist
        echo -n $AppleVstExtension " "
    else
        echo -n -e "\033[2;30m"$AppleVstExtension" \033[0m"
    fi
}

generate_plugin_vst3() {
    if [ -d $ThisPath/../$1.$AppleVst3Extension ]; then
        if [ -d $ThisPath/Builds/$3.$AppleVst3Extension ]; then
            rm -rf $ThisPath/Builds/$3.$AppleVst3Extension
        fi

        cp -rf $ThisPath/../$1.$AppleVst3Extension/ $ThisPath/Builds/$3.$AppleVst3Extension
        cp -rf $2/$3/ $ThisPath/Builds/$3.$AppleVst3Extension/Contents/Resources
        plutil -replace CFBundleName -string $3 $ThisPath/Builds/$3.$AppleVst3Extension/Contents/Info.plist
        plutil -replace CFBundleDisplayName -string $3 $ThisPath/Builds/$3.$AppleVst3Extension/Contents/Info.plist
        echo -n $AppleVst3Extension " "
    else
        echo -n -e "\033[2;30m"$AppleVst3Extension" \033[0m"
    fi
}

au_get_plugin_code() {
    while IFS='' read -r line || [[ -n "$line" ]]; do
        local wline=($line)
        if [ "${wline[0]}" == "code" ]; then
            echo ${wline[1]}
            return
        fi
    done < "$1"
    echo "0"
}

generate_plugin_au() {
    if [ ! -f $2/$3/$3.txt ]; then
        echo -n -e "\033[31m(No config file) \033[0m"
        return
    fi

    local code=$(au_get_plugin_code $2/$3/$3.txt)
    if [ "$code" == "0" ]; then
        echo -n -e "\033[31mNo plugin code defined\033[0m"
        return
    fi
    code=${code::4}
    if [ -d $ThisPath/../$1.$AppleAuExtension ]; then
        if [ -d $ThisPath/Builds/$3.$AppleAuExtension ]; then
            rm -rf $ThisPath/Builds/$3.$AppleAuExtension
        fi

        cp -rf $ThisPath/../$1.$AppleAuExtension/ $ThisPath/Builds/$3.$AppleAuExtension
        cp -rf $2/$3/ $ThisPath/Builds/$3.$AppleAuExtension/Contents/Resources
        plutil -replace CFBundleName -string $3 $ThisPath/Builds/$3.$AppleAuExtension/Contents/Info.plist
        plutil -replace CFBundleDisplayName -string $3 $ThisPath/Builds/$3.$AppleAuExtension/Contents/Info.plist
        plutil -replace AudioComponents.name -string "Pierre Guillot: $3" $ThisPath/Builds/$3.$AppleAuExtension/Contents/Info.plist
        plutil -replace AudioComponents.subtype -string $code $ThisPath/Builds/$3.$AppleAuExtension/Contents/Info.plist
        echo -n $AppleAuExtension
    else
        echo -n -e "\033[2;30m"$AppleAuExtension"\033[0m"
    fi
}

generate_plugin_lib() {
    if [ -d $ThisPath/$1.$LibExtension ]; then
        if [ -f $ThisPath/Builds/$3.$LibExtension ]; then
            rm -f $ThisPath/Builds/$3.$LibExtension
        fi
        if [ -d $ThisPath/Builds/$3 ]; then
            rm -rf $ThisPath/Builds/$3
        fi

        cp -f $ThisPath/$1.$LibExtension/ $ThisPath/Builds/$3.$LibExtension
        cp -rf $2/$3/ $ThisPath/Builds/$3
        echo -n $LibExtension " "
    else
        echo -n -e "\033[2;30m"$LibExtension" \033[0m"
    fi
}

plugin_get_type() {
    while IFS='' read -r line || [[ -n "$line" ]]; do
        local wline=($line)
        if [ "${wline[0]}" == "type" ]; then
            echo ${wline[1]}
            return
        fi
    done < "$1"
    echo "0"
}

generate_plugins_mac() {
    CamomileName=$CamomileEffect
    local type="effect"
    if [ -f $1/$2/$2.txt ]; then
        type=$(plugin_get_type $1/$2/$2.txt)
        type="${type%?}"
        if [ "$type" == "0" ]; then
            CamomileName=$CamomileEffect
        elif [ "$type" == "instrument" ] || [ "$type" == "synthesizer" ] || [ "$type" == "inst" ] || [ "$type" == "syn" ]; then
            CamomileName=$CamomileInstrument
            CamomileName=$CamomileInstrument
        elif [ "$type" == "effect" ] || [ "$type" == "fx" ]; then
            CamomileName=$CamomileEffect
        else
            echo -n -e "\033[31mNo plugin type defined\033[0m"
            return
        fi
    else
        echo -e $2 " \033[31mNo config file defined\033[0m"
        return
    fi
    echo -n $2 "-" $type "- ("
    generate_plugin_vst $CamomileName $1 $2
    generate_plugin_vst3 $CamomileName $1 $2
    generate_plugin_au $CamomileName $1 $2
    echo ")"
}

generate_all_plugins_mac() {
    echo  -e "\033[1;30mGenerating Effects Plugins\033[0m"
    for Patch in $ThisPath/*
    do
      if [ -d $Patch ]; then
          local PluginName=$(basename "$Patch")
          local PluginExtension="${PluginName##*.}"
          local PluginName="${PluginName%.*}"
          generate_plugins_mac $ThisPath $PluginName
      fi
    done
    echo -e "\033[1;30mFinished\033[0m"
}


################################################################################
#                       POSTS                                                  #
################################################################################

post_error() {
    echo -e "\033[31m"$1"\033[0m"
}

post_log() {
    echo -e "\033[2;30m"$1"\033[0m"
}

################################################################################
#                       GET PLUGIN TYPE LINUX                                  #
################################################################################

plugin_get_type_linux() {
    local plugin_dir=$1
    local plugin_name=$2
    local textfile=$plugin_dir/$plugin_name.txt
    if [ -f "$textfile" ]; then
        while IFS='' read -r line || [[ -n "$line" ]]; do
            local wline=($line)
            if [ "${wline[0]}" == "type" ]; then
                type=${wline[1]}
                type="${type%?}"
                echo ${type}
                return
            fi
        done < "$textfile"
        echo "0"
    fi
    echo "error"
}





################################################################################
#                       GENERATE VST PLUGIN LINUX                              #
################################################################################

generate_plugin_vst_linux() {
    local camo_name
    local plugin_input_dir=$1
    local plugin_output_dir=$2
    local plugin_name=$(basename $1)

    # Check if the folder exists and get the type of the plugin
    if [ -d $plugin_input_dir ]; then
        local plugin_type=$(plugin_get_type_linux $plugin_input_dir $plugin_name)
        if [ "$plugin_type" == "error" ]; then
            post_error "$plugin_input_dir does not contain description text file $plugin_name.txt"
            return
        elif [ "$plugin_type" == "instrument" ]; then
            camo_name=$CamomileInstrument
        elif [ "$plugin_type" == "effect" ]; then
            camo_name=$CamomileEffect
        else
            post_error "$plugin_type is not a valid"
            return
        fi
    else
        post_error "$plugin_input_dir is not a directory"
        return
    fi

    # Get the dynamic libraries
    if [ -f $ThisPath/$camo_name.$LinuxAppleVstExtension ]; then
        if [ -d $plugin_output_dir/$plugin_name ]; then
            rm -rf $plugin_output_dir/$plugin_name
        fi
        cp -rf $plugin_input_dir $plugin_output_dir/$plugin_name
        cp -f $ThisPath/$camo_name.$LinuxAppleVstExtension $plugin_output_dir/$plugin_name/$plugin_name.$LinuxAppleVstExtension
        post_log "$plugin_output_dir/$plugin_name/$plugin_name.$LinuxAppleVstExtension"
    else
        post_error "$camo_name.$LinuxAppleVstExtension is not available"
    fi
}

################################################################################
#                       GENERATE PLUGINS                                       #
################################################################################

generate_plugins() {
    if [ $machine == "Mac" ]; then

    elif [ $machine == "Linux" ]; then
        generate_plugin_vst_linux $subfolder $2
    else
        post_error "$machine is not a supported"
    fi
}

################################################################################
#                       GENERATE ALL PLUGINS                                   #
################################################################################

generate_all_plugins() {
    local plugin_input_dir=$1

    if [ -d $plugin_input_dir ]; then
        for subfolder in $plugin_input_dir/*
        do
            if [ -d $subfolder ]; then
                local plugin_name=$(basename "$subfolder")
                if [ -f "$subfolder/$plugin_name.pd" ]; then
                    generate_plugins $subfolder $2
                else
                    post_error "$subfolder does not contain a valid pd patch"
                fi
            else
                post_error "$subfolder is not a directory"
            fi
        done
    else
        post_error "$plugin_input_dir is not a directory"
        return
    fi
}

################################################################################
#                       CREATE OUTPUT DIRECTORY                                #
################################################################################

create_output_directory() {
    local output_dir=$1
    if [ ! -d $output_dir ]; then
        mkdir $output_dir
    fi
}

################################################################################
#                                   HELP                                       #
################################################################################

display_help() {
    echo  -e "\033[1;30mCamomile Plugin Generator\033[0m"
    echo  -e "camomile [pluginpath] - generate a plugin"
    echo  -e "camomile -d [dirpath] - generate all the plugin in a directory"
    echo  -e "camomile -o [outputpath] - set the ouput path"
    echo  -e "camomile help - display help"
}

################################################################################
#                                   Main method                                #
################################################################################

if [ "$1" == "help" ]; then
    display_help
else
    setoutput="false"
    output_dir="./builds"
    folder_mode="false"
    pluginpath="invalid"

    for var in "$@"
    do
        if [[ "$setoutput" == "true" ]]; then
            output_dir=$var
            setoutput=false
        elif [[ $var == "-d" ]]; then
            FolderMode="true"
        elif [[ $var == "-o" ]]; then
            setoutput="true"
        elif [[ $pluginpath == "invalid" ]]; then
            pluginpath=$var
        else
            echo -e "\033[31m"$var" wrong arguments\033[0m"
        fi
    done

    create_output_directory $output_dir
    echo -e "Camomile - Plugin Generator"
    if [[ "$FolderMode" == true ]]; then
        generate_all_plugins $pluginpath $output_dir
    else
        generate_plugins $pluginpath $output_dir
    fi
fi
