/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

CicmComponent::CicmComponent(CicmObject const& object) : m_object(object)
{
    Component::setBounds(m_object.getBounds());
}

CicmComponent::~CicmComponent()
{
    ;
}

void CicmComponent::paint(Graphics& g)
{
    g.fillAll(m_object.getBackgroundColor());
    g.setColour(m_object.getBorderColor());
    g.drawRect(getBounds().withZeroOrigin());
}

CamomileAudioProcessorEditor::CamomileAudioProcessorEditor(CamomileAudioProcessor& p) :
AudioProcessorEditor(&p),
m_processor(p),
m_file_drop(false)
{
    m_processor.addListener(this);
    m_patch = m_processor.getPatch();
    if(m_patch.isPlugin())
    {
        const std::vector<CicmObject> objects = m_patch.getObjects();
        for(auto it : objects)
        {
            m_objects.add(new CicmComponent(it));
            addAndMakeVisible(m_objects.getLast());
        }
        Component::setSize(m_patch.getWidth(), m_patch.getHeight());
    }
    else
    {
        setSize(400, 300);
    }
}

CamomileAudioProcessorEditor::~CamomileAudioProcessorEditor()
{
    m_processor.removeListener(this);
}

void CamomileAudioProcessorEditor::paint(Graphics& g)
{
    if(!m_patch.isPlugin())
    {
        g.fillAll(Colours::white);
        g.setColour(Colours::black);
        g.setFont (15.0f);
        g.drawText(juce::String("Drag & Drop your patch..."), getBounds().withZeroOrigin(), juce::Justification::centred);
    }
    else
    {
        g.fillAll(Colours::blue);
    }
    
    if(m_file_drop)
    {
        g.fillAll(Colours::lightblue.withAlpha(0.2f));
    }
    
    g.setColour(Colours::black);
    g.setFont (15.0f);
    g.drawText(juce::String(to_string(getNumChildComponents())), getBounds().withZeroOrigin(), juce::Justification::left);
    /*
    
    g.drawText(juce::String(to_string(counter2)), getBounds().withZeroOrigin(), juce::Justification::right);
    
    g.drawText(juce::String(to_string(counter)), getBounds().withZeroOrigin(), juce::Justification::centred);
     */
}

bool CamomileAudioProcessorEditor::isInterestedInFileDrag(const StringArray& files)
{
    if(files.size())
    {
        for(int i = 0; i < files.size(); i++)
        {
            if(files[i].endsWith(juce::StringRef(".pd")))
            {
                return true;
            }
        }
    }
    return false;
}

void CamomileAudioProcessorEditor::filesDropped(const StringArray& files, int x, int y)
{
    if(files.size())
    {
        for(int i = 0; i < files.size(); i++)
        {
            juce::File file(files[i]);
            if(file.getFileExtension() == juce::String(".pd"))
            {
                m_processor.loadPatch(file);
            }
        }
    }
}

void CamomileAudioProcessorEditor::patchChanged()
{
    if(m_processor.hasPatch())
    {
        const MessageManagerLock mmLock;
        if(mmLock.lockWasGained())
        {
            m_objects.clear();
            const std::vector<CicmObject> objects = m_patch.getObjects();
            for(auto it : objects)
            {
                m_objects.add(new CicmComponent(it));
                addAndMakeVisible(m_objects.getLast());
            }
            Component::setSize(m_patch.getWidth(), m_patch.getHeight());
        }
    }
    else
    {
        const MessageManagerLock mmLock;
        repaint();
    }
}

void CamomileAudioProcessorEditor::fileDragEnter(const StringArray& files, int x, int y)
{
    const MessageManagerLock mmLock;
    if(mmLock.lockWasGained())
    {
        m_file_drop = true;
        repaint();
    }
}

void CamomileAudioProcessorEditor::fileDragExit(const StringArray& files)
{
    m_file_drop = false;
    repaint();
}

void CamomileAudioProcessorEditor::resized()
{
    
}
