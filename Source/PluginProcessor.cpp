/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
CamomileAudioProcessor::CamomileAudioProcessor() : m_buffer_in(nullptr), m_buffer_out(nullptr)
{
    m_pd = new pd::PdBase;
}

CamomileAudioProcessor::~CamomileAudioProcessor()
{
    this->releaseResources();
}

//==============================================================================
const String CamomileAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

int CamomileAudioProcessor::getNumParameters()
{
    return 0;
}

float CamomileAudioProcessor::getParameter (int index)
{
    return 0.0f;
}

void CamomileAudioProcessor::setParameter (int index, float newValue)
{
}

const String CamomileAudioProcessor::getParameterName (int index)
{
    return String();
}

const String CamomileAudioProcessor::getParameterText (int index)
{
    return String();
}

const String CamomileAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String CamomileAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool CamomileAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool CamomileAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool CamomileAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool CamomileAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool CamomileAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double CamomileAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int CamomileAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int CamomileAudioProcessor::getCurrentProgram()
{
    return 0;
}

void CamomileAudioProcessor::setCurrentProgram (int index)
{
}

const String CamomileAudioProcessor::getProgramName (int index)
{
    return String();
}

void CamomileAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void CamomileAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    releaseResources();
    if(m_pd)
    {
        if(m_pd->init(getNumInputChannels(), getNumOutputChannels(), sampleRate))
        {
            int numChannels = jmin(getNumInputChannels(), getNumOutputChannels());
            try
            {
                m_buffer_in  = new float[m_pd->blockSize() * numChannels];
            }
            catch(std::exception& e)
            {
                m_buffer_in = nullptr;
            }
            try
            {
                m_buffer_out = new float[m_pd->blockSize() * numChannels];
            }
            catch(std::exception& e)
            {
                m_buffer_out = nullptr;
            }
            m_patch = m_pd->openPatch("Test.pd", "/Users/Pierre/Desktop/");
            m_pd->computeAudio(true);
        }
    }
}

void CamomileAudioProcessor::releaseResources()
{
    if(m_pd)
    {
        m_pd->computeAudio(false);
        if(m_buffer_in)
        {
            free(m_buffer_in);
        }
        if(m_buffer_out)
        {
            free(m_buffer_out);
        }
        m_buffer_in  = nullptr;
        m_buffer_out = nullptr;
    }
}

void CamomileAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    int nsamples = buffer.getNumSamples();
    int nchannels = buffer.getNumChannels();
    for(int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
    {
        buffer.clear (i, 0, buffer.getNumSamples());
    }
    
    if(shouldProcess())
    {
        int index = 0;
        while(nsamples > 0)
        {
            int max = jmin(nsamples, m_pd->blockSize());
            float* input = m_buffer_in;
            for(int i = 0; i < max; ++i)
            {
                for(int j = 0; j < nchannels; ++j)
                {
                    *input++ = buffer.getReadPointer(j)[index + i];
                }
            }
            
            m_pd->processFloat (1, m_buffer_in, m_buffer_out);
            
            const float* output = m_buffer_out;
            for(int i = 0; i < max; ++i)
            {
                for(int j = 0; j < nchannels; ++j)
                {
                    buffer.getWritePointer(j)[index + i] = *output++;
                }
            }
            
            index    += max;
            nsamples -= max;
        }
    }
}

//==============================================================================
bool CamomileAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* CamomileAudioProcessor::createEditor()
{
    return new CamomileAudioProcessorEditor (*this);
}

//==============================================================================
void CamomileAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void CamomileAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

void CamomileAudioProcessor::loadPatch(const String& path)
{
    if(m_pd)
    {
        suspendProcessing(true);
        if(isSuspended())
        {
            if(path.isNotEmpty() && path.endsWith(juce::StringRef(".pd")))
            {
                m_patch = m_pd->openPatch(path.toStdString(), std::string());
            }
            else if(m_patch.isValid())
            {
                m_pd->closePatch(m_patch);
            }
        }
        suspendProcessing(false);
    }
    
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new CamomileAudioProcessor();
}


