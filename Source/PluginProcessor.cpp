/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PatchEditor.h"

//==============================================================================
CamomileAudioProcessor::CamomileAudioProcessor() : Instance(string("camomile")),
m_patch(Patch(*this, "Test2.pd", "/Users/Pierre/Desktop/"))
{
    
}

CamomileAudioProcessor::~CamomileAudioProcessor()
{
    lock_guard<mutex> guard(m_mutex);
    m_listeners.clear();
}

int CamomileAudioProcessor::getNumParameters()
{
    return 64;
}

const String CamomileAudioProcessor::getParameterName(int index)
{;
    if(m_patch)
    {
        int count = 0;
        vector<Gui> objects(m_patch.getGuis());
        for(auto it : objects)
        {
            if(it.hasPresetName())
            {
                if(count++ == index)
                {
                    return String(it.getPresetName());
                }
            }
        }
    }
    return String();
}

float CamomileAudioProcessor::getParameter (int index)
{
    return 0.0f;
}

void CamomileAudioProcessor::setParameter (int index, float newValue)
{
}

const String CamomileAudioProcessor::getParameterText (int index)
{
    return String();
}

bool CamomileAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool CamomileAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

void CamomileAudioProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    try
    {
        prepareDsp(getNumInputChannels(), getNumOutputChannels(), sampleRate, samplesPerBlock);
    }
    catch(std::exception& e)
    {
        std::cout << e.what() << "\n";
    }
}

void CamomileAudioProcessor::releaseResources()
{
    releaseDsp();
}

void CamomileAudioProcessor::processBlock(AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    for(int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
    {
        buffer.clear(i, 0, buffer.getNumSamples());
    }
    performDsp(buffer.getNumSamples(),
                    getNumInputChannels(), buffer.getArrayOfReadPointers(),
                    getNumOutputChannels(), buffer.getArrayOfWritePointers());
}

AudioProcessorEditor* CamomileAudioProcessor::createEditor()
{
    return new PatchEditor(*this);
}

void CamomileAudioProcessor::getStateInformation(MemoryBlock& destData)
{
    XmlElement xml("CamomileSettings");
    xml.setAttribute("name", m_patch.getName());
    xml.setAttribute("path", m_patch.getPath());
    copyXmlToBinary(xml, destData);
}

void CamomileAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    ScopedPointer<XmlElement> xml(getXmlFromBinary(data, sizeInBytes));
    if(xml != nullptr)
    {
        if(xml->hasTagName("CamomileSettings"))
        {
            String name = xml->getStringAttribute("name");
            String path = xml->getStringAttribute("path");
            
            File file(path + "/" + name);
            loadPatch(file);
        }
    }
}

void CamomileAudioProcessor::loadPatch(const juce::File& file)
{
    suspendProcessing(true);
    if(isSuspended())
    {
        if(true)
        {
            lock_guard<mutex> guard(m_mutex);
            if(file.exists() && file.getFileExtension() == String(".pd"))
            {
                m_patch = Patch(*this,
                                file.getFileName().toStdString(),
                                file.getParentDirectory().getFullPathName().toStdString());
            }
        }
        
        vector<Listener*> listeners = getListeners();
        for(auto it : listeners)
        {
            it->patchChanged();
        }
        updateHostDisplay();
    }
    
    suspendProcessing(false);
}

void CamomileAudioProcessor::addListener(Listener* listener)
{
    if(listener)
    {
        lock_guard<mutex> guard(m_mutex);
        m_listeners.insert(listener);
    }
}

void CamomileAudioProcessor::removeListener(Listener* listener)
{
    if(listener)
    {
        lock_guard<mutex> guard(m_mutex);
        m_listeners.erase(listener);
    }
}

vector<CamomileAudioProcessor::Listener*> CamomileAudioProcessor::getListeners() const noexcept
{
    lock_guard<mutex> guard(m_mutex);
    return vector<Listener*>(m_listeners.begin(), m_listeners.end());
}

AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new CamomileAudioProcessor();
}


